---
openapi: 3.0.1
info:
  title: API Documentation
  version: v1
components:
  schemas:
    user:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        phone_number:
          type: string
        role:
          type: string
          enum:
          - user
          - admin
        created_at:
          type: string
          format: datetime
        updated_at:
          type: string
          format: datetime
      required:
      - id
      - email
      - role
  securitySchemes:
    bearer_auth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Use the access-token, client, and uid headers for authentication
servers:
- url: http://localhost:3000
paths:
  "/api/auth":
    post:
      summary: Registers a new user
      tags:
      - Authentication
      parameters: []
      responses:
        '200':
          description: user created
        '422':
          description: invalid request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: password123
                password_confirmation:
                  type: string
                  example: password123
                first_name:
                  type: string
                  example: John
                last_name:
                  type: string
                  example: Doe
                phone_number:
                  type: string
                  example: '1234567890'
              required:
              - email
              - password
              - password_confirmation
              - first_name
              - last_name
              - phone_number
  "/api/auth/sign_in":
    post:
      summary: Signs in a user
      tags:
      - Authentication
      parameters: []
      responses:
        '200':
          description: user signed in
          headers:
            access-token:
              schema:
                type: string
              description: Authentication token
            client:
              schema:
                type: string
              description: Client identifier
            uid:
              schema:
                type: string
              description: User identifier (email)
        '401':
          description: invalid credentials
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: password123
              required:
              - email
              - password
  "/api/auth/validate_token":
    get:
      summary: Validates authentication token
      tags:
      - Authentication
      security:
      - bearer_auth: []
      parameters:
      - name: access-token
        in: header
        required: true
        schema:
          type: string
      - name: client
        in: header
        required: true
        schema:
          type: string
      - name: uid
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: token is valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    "$ref": "#/components/schemas/user"
        '401':
          description: token is invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  errors:
                    type: array
                    items:
                      type: string
                    example:
                    - Invalid login credentials
  "/api/auth/sign_out":
    delete:
      summary: Signs out current user
      tags:
      - Authentication
      security:
      - bearer_auth: []
      parameters:
      - name: access-token
        in: header
        required: true
        schema:
          type: string
      - name: client
        in: header
        required: true
        schema:
          type: string
      - name: uid
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: signed out successfully
        '404':
          description: user not found
  "/api/auth/confirmation":
    post:
      summary: Resend confirmation instructions
      tags:
      - Authentication
      parameters: []
      responses:
        '200':
          description: confirmation instructions sent
        '404':
          description: user not found
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
              required:
              - email
    get:
      summary: Confirm email address
      tags:
      - Authentication
      parameters:
      - name: confirmation_token
        in: query
        required: true
        description: Token received in confirmation email
        schema:
          type: string
      - name: redirect_url
        in: query
        required: false
        description: URL to redirect after confirmation (optional)
        schema:
          type: string
      responses:
        '200':
          description: email confirmed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Your email address has been successfully confirmed.
        '422':
          description: invalid or expired token
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  errors:
                    type: array
                    items:
                      type: string
                    example:
                    - Confirmation token is invalid or has expired. Please request
                      a new one.
  "/api/favorites":
    get:
      summary: Lists all favorites for current user
      tags:
      - Favorites
      security:
      - bearer_auth: []
      parameters:
      - name: access-token
        in: header
        required: true
        schema:
          type: string
      - name: client
        in: header
        required: true
        schema:
          type: string
      - name: uid
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: favorites found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    created_at:
                      type: string
                      format: datetime
                    sale_post:
                      type: object
                      properties:
                        id:
                          type: integer
                        title:
                          type: string
                        description:
                          type: string
                        price:
                          type: number
                        status:
                          type: string
                        year:
                          type: integer
                        odo:
                          type: integer
                        created_at:
                          type: string
                          format: datetime
                        updated_at:
                          type: string
                          format: datetime
                    user:
                      type: object
                      properties:
                        id:
                          type: integer
                        email:
                          type: string
                        first_name:
                          type: string
                        last_name:
                          type: string
                  required:
                  - id
                  - created_at
                  - sale_post
                  - user
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                    example:
                    - Authorized users only.
  "/api/favorites/{id}":
    parameters:
    - name: id
      in: path
      description: Favorite ID
      required: true
      schema:
        type: integer
    delete:
      summary: Removes a post from favorites
      tags:
      - Favorites
      security:
      - bearer_auth: []
      parameters:
      - name: access-token
        in: header
        required: true
        schema:
          type: string
      - name: client
        in: header
        required: true
        schema:
          type: string
      - name: uid
        in: header
        required: true
        schema:
          type: string
      responses:
        '204':
          description: favorite removed
        '401':
          description: unauthorized
        '404':
          description: favorite not found
  "/api/sale_posts/{sale_post_id}/favorites":
    parameters:
    - name: sale_post_id
      in: path
      description: Sale Post ID
      required: true
      schema:
        type: integer
    post:
      summary: Adds a post to favorites
      tags:
      - Favorites
      security:
      - bearer_auth: []
      parameters:
      - name: access-token
        in: header
        required: true
        schema:
          type: string
      - name: client
        in: header
        required: true
        schema:
          type: string
      - name: uid
        in: header
        required: true
        schema:
          type: string
      responses:
        '201':
          description: favorite created
        '401':
          description: unauthorized
        '404':
          description: sale post not found
        '422':
          description: invalid request
  "/api/predicts":
    post:
      summary: Predict price
      tags:
      - Pridiction
      parameters: []
      responses:
        '200':
          description: success
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                car_name:
                  type: string
                  example: Toyota Land Cruiser VX 4.6 V8
                year_of_manufacture:
                  type: integer
                  example: 2020
                mileage:
                  type: integer
                  example: 10000
              required:
              - car_name
              - year_of_manufacture
              - mileage
  "/api/sale_posts":
    get:
      summary: Lists all sale posts
      tags:
      - Sale Posts
      responses:
        '200':
          description: sale posts found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    title:
                      type: string
                    description:
                      type: string
                    price:
                      type: number
                    status:
                      type: string
                      enum:
                      - active
                      - sold
                    year:
                      type: integer
                    odo:
                      type: integer
                    created_at:
                      type: string
                      format: datetime
                    updated_at:
                      type: string
                      format: datetime
                    user:
                      type: object
                      properties:
                        id:
                          type: integer
                        email:
                          type: string
                    brand:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                    model:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                    version:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                    sale_post_images:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: integer
                          image_url:
                            type: string
                  required:
                  - id
                  - title
                  - status
                  - user
                  - brand
                  - model
                  - version
    post:
      summary: Creates a sale post
      tags:
      - Sale Posts
      security:
      - bearer_auth: []
      parameters:
      - name: access-token
        in: header
        required: true
        schema:
          type: string
      - name: client
        in: header
        required: true
        schema:
          type: string
      - name: uid
        in: header
        required: true
        schema:
          type: string
      responses:
        '201':
          description: sale post created
        '401':
          description: unauthorized
        '422':
          description: invalid request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                sale_post:
                  type: object
                  properties:
                    title:
                      type: string
                      example: 2020 Toyota Land Cruiser VX
                    description:
                      type: string
                      example: Excellent condition, one owner
                    price:
                      type: number
                      example: 50000
                    status:
                      type: string
                      enum:
                      - active
                      - sold
                      example: active
                    year:
                      type: integer
                      example: 2020
                    odo:
                      type: integer
                      example: 15000
                    brand_id:
                      type: integer
                      example: 1
                    model_id:
                      type: integer
                      example: 1
                    version_id:
                      type: integer
                      example: 1
                  required:
                  - title
                  - status
                  - brand_id
                  - model_id
                  - version_id
                images:
                  type: array
                  items:
                    type: string
                  example:
                  - http://example.com/image1.jpg
                  - http://example.com/image2.jpg
              required:
              - sale_post
  "/api/sale_posts/{id}":
    parameters:
    - name: id
      in: path
      description: Sale Post ID
      required: true
      schema:
        type: integer
    get:
      summary: Retrieves a sale post
      tags:
      - Sale Posts
      responses:
        '200':
          description: sale post found
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  title:
                    type: string
                  description:
                    type: string
                  price:
                    type: number
                  status:
                    type: string
                  year:
                    type: integer
                  odo:
                    type: integer
                  user_id:
                    type: integer
                  brand_id:
                    type: integer
                  model_id:
                    type: integer
                  version_id:
                    type: integer
                  created_at:
                    type: string
                    format: datetime
                  updated_at:
                    type: string
                    format: datetime
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                      email:
                        type: string
                  brand:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                  model:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                  version:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                  sale_post_images:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        image_url:
                          type: string
                  comments:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        content:
                          type: string
                        user:
                          type: object
                          properties:
                            id:
                              type: integer
                            email:
                              type: string
        '404':
          description: sale post not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Sale post not found
    put:
      summary: Updates a sale post
      tags:
      - Sale Posts
      security:
      - bearer_auth: []
      parameters:
      - name: access-token
        in: header
        required: true
        schema:
          type: string
      - name: client
        in: header
        required: true
        schema:
          type: string
      - name: uid
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: sale post updated
        '401':
          description: unauthorized
        '403':
          description: forbidden
        '404':
          description: sale post not found
        '422':
          description: invalid request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                sale_post:
                  type: object
                  properties:
                    title:
                      type: string
                      example: Updated Toyota Land Cruiser VX
                    description:
                      type: string
                      example: Updated description
                    price:
                      type: number
                      example: 48000
                    status:
                      type: string
                      enum:
                      - active
                      - sold
                      example: sold
                    year:
                      type: integer
                      example: 2020
                    odo:
                      type: integer
                      example: 20000
                    brand_id:
                      type: integer
                      example: 1
                    model_id:
                      type: integer
                      example: 1
                    version_id:
                      type: integer
                      example: 1
                images:
                  type: array
                  items:
                    type: string
                  example:
                  - http://example.com/newimage1.jpg
              required:
              - sale_post
    delete:
      summary: Deletes a sale post
      tags:
      - Sale Posts
      security:
      - bearer_auth: []
      parameters:
      - name: access-token
        in: header
        required: true
        schema:
          type: string
      - name: client
        in: header
        required: true
        schema:
          type: string
      - name: uid
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: sale post deleted
        '401':
          description: unauthorized
        '403':
          description: forbidden
        '404':
          description: sale post not found
        '422':
          description: unprocessable entity
  "/api/sale_posts/{sale_post_id}/sale_post_images":
    parameters:
    - name: sale_post_id
      in: path
      description: Sale Post ID
      required: true
      schema:
        type: integer
    post:
      summary: Adds images to a sale post
      tags:
      - Sale Post Images
      security:
      - bearer_auth: []
      parameters:
      - name: access-token
        in: header
        required: true
        schema:
          type: string
      - name: client
        in: header
        required: true
        schema:
          type: string
      - name: uid
        in: header
        required: true
        schema:
          type: string
      responses:
        '201':
          description: image created
        '401':
          description: unauthorized
        '404':
          description: sale post not found
        '422':
          description: invalid request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                sale_post_image:
                  type: object
                  properties:
                    image_url:
                      type: string
                      example: http://example.com/image.jpg
                  required:
                  - image_url
              required:
              - sale_post_image
  "/api/sale_posts/{sale_post_id}/sale_post_images/{id}":
    parameters:
    - name: sale_post_id
      in: path
      description: Sale Post ID
      required: true
      schema:
        type: integer
    - name: id
      in: path
      description: Sale Post Image ID
      required: true
      schema:
        type: integer
    delete:
      summary: Deletes a sale post image
      tags:
      - Sale Post Images
      security:
      - bearer_auth: []
      parameters:
      - name: access-token
        in: header
        required: true
        schema:
          type: string
      - name: client
        in: header
        required: true
        schema:
          type: string
      - name: uid
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: image deleted
        '401':
          description: unauthorized
        '404':
          description: sale post or image not found
  "/api/users/{id}":
    parameters:
    - name: id
      in: path
      description: User ID
      required: true
      schema:
        type: integer
    get:
      summary: Retrieves a user
      tags:
      - Users
      security:
      - bearer_auth: []
      parameters:
      - name: access-token
        in: header
        required: true
        schema:
          type: string
      - name: client
        in: header
        required: true
        schema:
          type: string
      - name: uid
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: user found
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                      email:
                        type: string
                      first_name:
                        type: string
                      last_name:
                        type: string
                      role:
                        type: string
                      created_at:
                        type: string
                        format: datetime
                    required:
                    - id
                    - email
                    - role
        '404':
          description: user not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User not found
    put:
      summary: Updates a user
      tags:
      - Users
      security:
      - bearer_auth: []
      parameters:
      - name: access-token
        in: header
        required: true
        schema:
          type: string
      - name: client
        in: header
        required: true
        schema:
          type: string
      - name: uid
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: user updated
        '403':
          description: not authorized
        '404':
          description: user not found
        '422':
          description: invalid request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    first_name:
                      type: string
                      example: John
                    last_name:
                      type: string
                      example: Doe
                    email:
                      type: string
                      example: john.doe@example.com
                    role:
                      type: string
                      example: user
                      description: Only admins can update role
  "/api/profile":
    get:
      summary: Retrieves current user profile
      tags:
      - Users
      security:
      - bearer_auth: []
      parameters:
      - name: access-token
        in: header
        required: true
        schema:
          type: string
      - name: client
        in: header
        required: true
        schema:
          type: string
      - name: uid
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: profile retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                      email:
                        type: string
                      first_name:
                        type: string
                      last_name:
                        type: string
                      role:
                        type: string
                      created_at:
                        type: string
                        format: datetime
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                    example:
                    - Authorized users only.
  "/api/change_password":
    post:
      summary: Changes user password
      tags:
      - Users
      security:
      - bearer_auth: []
      parameters:
      - name: access-token
        in: header
        required: true
        schema:
          type: string
      - name: client
        in: header
        required: true
        schema:
          type: string
      - name: uid
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: password changed
        '422':
          description: invalid request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                current_password:
                  type: string
                  example: current123
                password:
                  type: string
                  example: new123
                password_confirmation:
                  type: string
                  example: new123
              required:
              - current_password
              - password
              - password_confirmation
